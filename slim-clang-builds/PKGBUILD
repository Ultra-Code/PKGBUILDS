# Maintainer: Lone_Wolf <lone_wolf@klaas-de-kat.nl>

#INFO: https://llvm.org/docs/CMake.html
#INFO: https://llvm.org/docs/AdvancedBuilds.html
#INFO: https://llvm.org/docs/BuildingADistribution.html
#INFO: https://libcxx.llvm.org/BuildingLibcxx.html

pkgbase=llvm-minimal-git
pkgname=(llvm-minimal-git llvm-libs-minimal-git clang-minimal-git clang-libs-minimal-git clang-opencl-headers-minimal-git)
pkgver=19.0.0_r496343.60baaf153d
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=(git clang libc++ ninja cmake mold libffi libedit ncurses libxml2
  libxcrypt python python-setuptools)
# b361b5369ed4
source=("git+https://github.com/llvm/llvm-project.git"
)
md5sums=('SKIP')
sha512sums=('SKIP')

# explicitly disable lto & debug to reduce number of build hangs , resources needed and runtime issues
options=(!lto !debug)

_major_ver=19

_get_distribution_components() {
  local target

  ninja -t targets | grep -Po 'install-\K.*(?=-stripped)' | while read -r target; do
    case $target in
    # Must come before LLVM* to ensure it isn't skipped
    LLVM) ;;
    # Build libraries needed for clang-tblgen
    LLVMDemangle | LLVMSupport | LLVMTableGen) ;;
    #matched targets with continue statements are skipped
    distribution | llvm-libraries) continue ;;
    # exclude llvm-exegesis (doesn't seem useful without libpfm)
    llvm-exegesis) continue ;;
    # don't build functionality conflicting with llvm-libs
    LLVMgold) continue ;;
    # exclude static libraries
    LLVM*) continue ;;
    clang-libraries | clang-tidy-headers) continue ;;
    # Build shared libraries
    clang | clangd | clang-*) ;;
    # Skip all else
    clang* | findAllSymbols) continue ;;
    esac
    echo $target
  done
}

pkgver() {
  cd llvm-project/cmake/Modules

  # This will almost match the output of `llvm-config --version` when the
  # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
  # dash being replaced with underscore because of Pacman requirements.
  local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
    'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
    LLVMVersion.cmake)_r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
  echo "${_pkgver}"
}

build() {
  local cmake_args=(
    -G Ninja
    -D CMAKE_BUILD_TYPE=Release
    -D CMAKE_INSTALL_PREFIX=/usr
    -D LLVM_BINUTILS_INCDIR=/usr/include
    -D CMAKE_C_COMPILER=clang
    -D CMAKE_CXX_COMPILER=clang++
    -D LLVM_HOST_TRIPLE="${CHOST}"
    -D CMAKE_C_FLAGS_RELEASE="${CFLAGS}"
    -D CMAKE_CXX_FLAGS_RELEASE="${CXXFLAGS} -Wno-modules-import-nested-redundant"
    -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lldb"
    -D LLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind"
    -D LLVM_ENABLE_UNWIND_TABLES=OFF
    -D LLVM_PARALLEL_LINK_JOBS=6
    -D LLVM_PARALLEL_COMPILE_JOBS=6
    -D LLVM_TARGETS_TO_BUILD=X86
    -D LLVM_USE_LINKER=mold
    -D LLVM_ENABLE_LTO=OFF #Thin increases link time drastically
    -D LLVM_BUILD_LLVM_DYLIB=ON
    -D LLVM_LINK_LLVM_DYLIB=ON
    -D CLANG_LINK_CLANG_DYLIB=ON
    -D LLVM_INSTALL_UTILS=ON
    -D LLVM_ENABLE_LIBCXX=ON
    -D LLVM_ENABLE_MODULES=ON
    -D LIBCXX_INSTALL_MODULES=ON
    -D LLVM_BUILD_BENCHMARKS=OFF
    -D LLVM_INCLUDE_BENCHMARKS=OFF
    -D LLVM_BUILD_DOCS=OFF
    -D LLVM_INCLUDE_DOCS=OFF
    -D LLVM_BUILD_EXAMPLES=OFF
    -D LLVM_INCLUDE_EXAMPLES=OFF
    -D LLVM_BUILD_TESTS=OFF
    -D LLVM_INCLUDE_TESTS=OFF
    -D LLVM_ENABLE_BINDINGS=OFF
  )

  #GCC issue build aborts with FORTIFY_SOURCE=3 , see https://github.com/llvm/llvm-project/issues/85509
  # export CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"

  cmake -B _build -S "$srcdir"/llvm-project/llvm "${cmake_args[@]}" -Wno-dev

  pushd "$srcdir"/_build
  local distribution_components=$(_get_distribution_components | paste -sd\;)
  popd
  test -n "$distribution_components"
  cmake_args+=(-D LLVM_DISTRIBUTION_COMPONENTS="$distribution_components")

  cmake -B _build -S "$srcdir"/llvm-project/llvm "${cmake_args[@]}" -Wno-dev | tee ${pkgname}-configure.log

  time ninja -C _build | tee ${pkgname}-build.log
}

package_llvm-minimal-git() {
  pkgdesc="Collection of modular and reusable compiler and toolchain technologies, trimmed down git version"
  depends=(llvm-libs-minimal-git="$pkgver-$pkgrel")
  provides=('llvm')
  conflicts=('llvm')
  optdepends=('python: for using lit (LLVM Integrated Tester)'
    'python-setuptools: for using lit'
  )

  DESTDIR="$pkgdir" ninja -C _build install-distribution
  # | tee ${pkgname}-install.log

  # Include lit for running lit-based tests in other projects
  pushd "$srcdir"/llvm-project/llvm/utils/lit
  python3 setup.py install --root="$pkgdir" -O1
  # -O1 ensures the python files for lit will be optimized
  popd

  # Remove symlinks to prevent conflict with repo llvm-libs
  rm -f "$pkgdir"/usr/lib/lib{LLVM,LTO,Remarks}.so

  # for an unknown reason !staticlibs doesn't remove all static *.a libraries from clang
  # ensure they are removed
  find "$pkgdir"/usr/lib/clang -depth -type f -name "*.a" -delete

  # prepare folders in srcdir to store files that are placed in other package_*() functions
  mkdir -p "$srcdir"{/llvm-libs/usr/lib,/clang-libs/usr/lib,/clang-opencl-headers/usr/{lib/clang/$_major_ver/include,include/clang/Basic}}

  # The llvm runtime libraries go into llvm-libs-minimal-git
  mv -f "$pkgdir"/usr/lib/{libLLVM*.so*,libLTO.so.*,libRemarks.so.*} "$srcdir"/llvm-libs/usr/lib

  # The clang runtime libraries go into clang-libs-minimal-git
  mv -f "$pkgdir"/usr/lib/libclang{,-cpp}.so* "$srcdir"/clang-libs/usr/lib

  # clang opencl files go to clang-opencl-headers-git
  mv -f "$pkgdir"/usr/lib/clang/$_major_ver/include/opencl* "$srcdir"/clang-opencl-headers/usr/lib/clang/$_major_ver/include
  mv -f "$pkgdir"/usr/include/clang/Basic/OpenCL* "$srcdir"/clang-opencl-headers/usr/include/clang/Basic

  # clang-minimal-git files go to a separate package
  mkdir -p "$srcdir"/clang/usr/{bin,include,lib,lib/cmake,share}
  mv -f "$pkgdir"/usr/lib/{libear,libscanbuild,clang} "$srcdir"/clang/usr/lib
  mv -f "$pkgdir"/usr/lib/cmake/clang "$srcdir"/clang/usr/lib/cmake/
  mv -f "$pkgdir"/usr/include/{clang,clang-c} "$srcdir"/clang/usr/include/
  # llvm project uses /usr/libexec and setting CMAKE_INSTALL_LIBEXECDIR doesn't affect that.
  # to comply with archlinux packaging standards we have to move some files manually
  mv -f "$pkgdir"/usr/libexec/* "$srcdir"/clang/usr/lib/clang
  rmdir "$pkgdir"/usr/libexec
  mv -f "$pkgdir"/usr/bin/{analyze-build,c-index-test,clang*,diagtool,find-all-symbols,git-clang-format,hmaptool,intercept-build,modularize,pp-trace,run-clang-tidy,scan-build,scan-build-py,scan-view} "$srcdir"/clang/usr/bin/
  mv -f "$pkgdir"/usr/share/{clang,man,opt-viewer,scan-build,scan-view} "$srcdir"/clang/usr/share/

  install -Dm644 "$srcdir"/llvm-project/llvm/LICENSE.TXT "$pkgdir"/usr/share/licenses/"$pkgname"/LICENSE.TXT
}

package_llvm-libs-minimal-git() {
  pkgdesc="LLVM runtime libraries, trimmed down trunk version"
  depends=(gcc-libs zlib libffi libedit ncurses libxml2)

  cp --preserve --recursive "$srcdir"/llvm-libs/* "$pkgdir"/

  install -Dm644 "$srcdir"/llvm-project/llvm/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/LICENSE.TXT
}

_python_optimize() {
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package_clang-minimal-git() {
  pkgdesc='C language family frontend for LLVM (trimmed down git version)'
  depends=(llvm-libs-minimal-git clang-libs-minimal-git clang)
  optdepends=('openmp: OpenMP support in clang with -fopenmp'
    'python: for scan-view, scan-build, git-clang-format, clang-rename and python bindings'
    'llvm-minimal-git: referenced by some clang headers')
  conflicts=(compiler-rt clang)
  provides=(compiler-rt clang clang-analyzer clang-tools-extra)

  cp --preserve --recursive "$srcdir"/clang/* "$pkgdir"/

  # Move scanbuild-py into site-packages
  local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
  install -d "$pkgdir/$site_packages"
  mv "$pkgdir"/usr/lib/{libear,libscanbuild} "$pkgdir/$site_packages/"

  sed -i 's|libexec|lib/clang|' \
    "$pkgdir/usr/bin/scan-build" \
    "$pkgdir/$site_packages/libscanbuild/analyze.py"

  # Compile Python scripts
  _python_optimize "$pkgdir"/usr/share "$pkgdir"/$site_packages

  install -Dm644 "$srcdir"/llvm-project/compiler-rt/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/compiler-rt-LICENSE.TXT
  install -Dm644 "$srcdir"/llvm-project/clang-tools-extra/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/clang-tools-extra-LICENSE.TXT
  install -Dm644 "$srcdir"/llvm-project/clang/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/clang-LICENSE.TXT
}

package_clang-libs-minimal-git() {
  pkgdesc="clang runtime libraries, trunk version"
  depends=(llvm-libs-minimal-git="$pkgver-$pkgrel")
  # the functionality offered by this package is part of the clang repo pacakge.
  # TODO: when/if this functionality is split off from repo clang, verify if changes are needed to this package

  provides=('clang-libs')
  conflicts=("clang<$pkgver-$pkgrel" 'clang-libs')

  cp --preserve --recursive "$srcdir"/clang-libs/* "$pkgdir"/

  install -Dm644 "$srcdir"/llvm-project/llvm/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/LICENSE.TXT
}

package_clang-opencl-headers-minimal-git() {
  pkgdesc="clang headers & include files for OpenCL, trunk version"
  depends=(clang-libs-minimal-git="$pkgver-$pkgrel")
  # the functionality offered by this package is part of the clang repo package.
  # As far as I know rusticl from mesa is the only known user.
  # TODO: when/if this functionality is split off from repo clang, verify if changes are needed to this package
  provides=('clang-opencl-headers')
  conflicts=("clang<$pkgver-$pkgrel" 'clang-opencl-headers')

  cp --preserve --recursive "$srcdir"/clang-opencl-headers/* "$pkgdir"/

  install -Dm644 "$srcdir"/llvm-project/llvm/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/LICENSE.TXT
}
