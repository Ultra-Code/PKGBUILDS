# Maintainer: Lone_Wolf <lone_wolf@klaas-de-kat.nl>
# LEARN: how to execute only a particular makepkg step .ie prepare, build, package
# MOVE: this to dev branch as it is very brittle
# CHANGE: back to ON/OF instead of YES/NO
# EXPLORE: install targets with TOOLCHAIN_ONLY option

# INFO: https://llvm.org/docs/CMake.html
# INFO: https://llvm.org/docs/AdvancedBuilds.html
# INFO: https://llvm.org/docs/BuildingADistribution.html
# INFO: https://libcxx.llvm.org/BuildingLibcxx.html

pkgname=(llvm-minimal-git llvm-libs-minimal-git clang-minimal-git libc++-minimal-git libc++abi-minimal-git)
pkgver=19.0.0_r497198.9c3f5fe88f
pkgrel=1
pkgdesc='C language family frontend for LLVM (trimmed down git version)'
url="https://llvm.org/"
pkgbase=llvm-minimal-git
arch=('x86_64')
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=(git ninja cmake clang mold libffi libedit ncurses libxml2 libxcrypt python python-setuptools)
# b361b5369ed4
source=("git+https://github.com/llvm/llvm-project.git"
  fix-missing-include-when-building-clang-with-modules.patch)
b2sums=('SKIP' 'SKIP')

# explicitly disable lto & debug to reduce number of build hangs , resources needed and runtime issues
options=(!lto !debug)

_major_ver=19

# get the list of components to be included in the final distribution
# NOTE: all enabled PROJECTS and RUNTIMES are built but only those
# in the distribution component specified by this function would be part
# of the final executable
_get_distribution_components() {
  local target

  ninja -t targets | grep -Po 'install-\K.*(?=-stripped)' |
    sort | uniq | while read -r target; do
    case $target in
    # Must come before LLVM* to ensure it isn't skipped
    LLVM) ;;
    # Build libraries needed for clang-tblgen
    LLVMDemangle | LLVMSupport | LLVMTableGen) ;;
    #matched targets with continue statements are skipped
    distribution | llvm-libraries) continue ;;
    # exclude llvm-exegesis (doesn't seem useful without libpfm)
    llvm-exegesis) continue ;;
    # exclude LLVMgold and static libraries
    LLVMgold | LLVM*) continue ;;
    clang-libraries | clang-tidy-headers) continue ;;
    # Build shared libraries
    clang | clangd | clang-*) ;;
    # Skip all else
    clang* | findAllSymbols) continue ;;
    # Anything not covered above is included
    *) ;;
    esac
    echo $target
  done
}

pkgver() {
  cd llvm-project/cmake/Modules

  # This will almost match the output of `llvm-config --version` when the
  # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
  # dash being replaced with underscore because of Pacman requirements.
  local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
    'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
    LLVMVersion.cmake)_r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
  echo "${_pkgver}"
}

prepare() {
  # fix module build error
  pushd "$srcdir"/llvm-project
  git apply ../fix-missing-include-when-building-clang-with-modules.patch
  popd
}

build() {
  CFLAGS=${CFLAGS}
  # https://reviews.llvm.org/D142279
  # GLIBCXX_* seem to enable assertions
  # Remove all occurances of -Wp,-D_GLIBCXX_ASSERTIONS
  CXXFLAGS=${CXXFLAGS//-Wp,-D_GLIBCXX_ASSERTIONS/""}
  LDFLAGS=${LDFLAGS}

  #Test have C|XXFLAGS exported at the top be for use if it causes it load the user specific ones also
  local cmake_args=(
    -GNinja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=/usr
    -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF
    -DLLVM_ENABLE_ASSERTIONS=OFF
    -DLLVM_BINUTILS_INCDIR=/usr/include
    -DCMAKE_C_COMPILER=clang
    -DCMAKE_CXX_COMPILER=clang++
    -DLLVM_PARALLEL_LINK_JOBS=6
    -DLLVM_PARALLEL_COMPILE_JOBS=6
    -DLLVM_HOST_TRIPLE="${CHOST}"
    -DCMAKE_C_FLAGS_RELEASE="${CFLAGS} -Wno-modules-import-nested-redundant"
    -DCMAKE_CXX_FLAGS_RELEASE="${CXXFLAGS}"
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra"
    -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;compiler-rt"
    -DLLVM_ENABLE_LIBCXX=ON
    -DLLVM_ENABLE_MODULES=ON
    -DLIBCXX_INSTALL_MODULES=ON
    -DLLVM_ENABLE_UNWIND_TABLES=OFF
    -DLIBCXXABI_USE_LLVM_UNWINDER=OFF
    -DLLVM_TARGETS_TO_BUILD=X86
    -DLLVM_USE_LINKER=mold
    -DLLVM_ENABLE_LTO=OFF #Thin increases link time drastically
    -DLLVM_INSTALL_UTILS=ON
    -DLLVM_BUILD_LLVM_DYLIB=ON
    -DLLVM_LINK_LLVM_DYLIB=ON
    -DCLANG_LINK_CLANG_DYLIB=ON
    -DLLVM_BUILD_BENCHMARKS=OFF
    -DLLVM_INCLUDE_BENCHMARKS=OFF
    -DLLVM_BUILD_DOCS=OFF
    -DLLVM_INCLUDE_DOCS=OFF
    -DLLVM_BUILD_EXAMPLES=OFF
    -DLLVM_INCLUDE_EXAMPLES=OFF
    -DLLVM_BUILD_TESTS=OFF
    -DLLVM_INCLUDE_TESTS=OFF
    -DLLVM_ENABLE_BINDINGS=OFF
  )
  cmake -B _build -S "$srcdir"/llvm-project/llvm "${cmake_args[@]}" -Wno-dev

  pushd "$srcdir"/_build
  local distribution_components=$(_get_distribution_components | paste -sd\;)
  echo "distribution components:"
  echo $distribution_components
  popd
  test -n "$distribution_components"
  cmake_args+=(-DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components")

  cmake -B _build -S "$srcdir"/llvm-project/llvm "${cmake_args[@]}" -Wno-dev

  ninja -C _build
}

package_llvm-minimal-git() {
  pkgdesc="Collection of modular and reusable compiler and toolchain technologies, trimmed down git version"
  depends=(llvm-libs-minimal-git="$pkgver-$pkgrel")
  provides=('llvm')
  conflicts=('llvm')
  optdepends=('python: for using lit (LLVM Integrated Tester)'
    'python-setuptools: for using lit'
  )
  # rm -rf "$pkgdir" && rm -rf "$srcdir"/{clang,llvm-libs}

  DESTDIR="$pkgdir" ninja -C _build install-distribution

  # Include lit for running lit-based tests in other projects
  pushd "$srcdir"/llvm-project/llvm/utils/lit
  # -O1 ensures the python files for lit will be optimized
  python3 setup.py install --root="$pkgdir" -O1
  popd

  # Remove symlinks to prevent conflict with repo llvm-libs
  rm -f "$pkgdir"/usr/lib/lib{LLVM,LTO,Remarks}.so

  # prepare llvm-libs dir in srcdir to store llvm runtime libraries files that would be part of llvm-libs-minimal-git package
  mkdir -p "$srcdir"/llvm-libs && mv -f "$pkgdir"/usr/lib/{libLLVM*.so*,libLTO.so.*,libRemarks.so.*} "$srcdir"/llvm-libs

  # prepare clang dir to store clang-minimal-git package files
  mkdir -p "$srcdir"/clang/{bin,lib/{cmake,},include,share}

  mv -f "$pkgdir"/usr/lib/{clang,libear,libscanbuild,libclang{,-cpp}.so*} "$srcdir"/clang/lib
  mv -f "$pkgdir"/usr/lib/cmake/clang "$srcdir"/clang/lib/cmake

  # Move analyzer scripts out of /usr/libexec
  mv -f "$pkgdir"/usr/libexec/* "$srcdir"/clang/lib/clang && rmdir "$pkgdir"/usr/libexec
  # clang includes
  mv -f "$pkgdir"/usr/include/{clang,clang-c} "$srcdir"/clang/include
  # clang binaries
  mv -f "$pkgdir"/usr/bin/{analyze-build,c-index-test,clang*,diagtool,find-all-symbols,git-clang-format,hmaptool,intercept-build,modularize,pp-trace,run-clang-tidy,scan-build,scan-build-py,scan-view} "$srcdir"/clang/bin
  # clang share
  mv -f "$pkgdir"/usr/share/{clang,man,opt-viewer,scan-build,scan-view} "$srcdir"/clang/share/

  # libc++ & libc++abi
  mkdir -p "$srcdir"/libcxx/{lib,include/{c++,},lib/{c++,}}
  # for libc++ & libc++abi libraries
  mv -f "$pkgdir"/usr/lib/"${CHOST}"/* "$srcdir"/libcxx/lib
  # For header include
  mv -f "$pkgdir"/usr/include/c++/v1 "$srcdir"/libcxx/include/c++
  # For modules
  mv -f "$pkgdir"/usr/share/libc++/v1 "$srcdir"/libcxx/lib/c++

  install -Dm644 "$srcdir"/llvm-project/llvm/LICENSE.TXT "$pkgdir"/usr/share/licenses/"$pkgname"/LICENSE.TXT
}

package_llvm-libs-minimal-git() {
  pkgdesc="LLVM runtime libraries, trimmed down trunk version"
  depends=(llvm-libs zlib libffi libedit ncurses libxml2)
  # create $pkgdir/usr/lib and copy content from llvm-libs/* into it
  install -d "$pkgdir"/usr/lib
  cp -a "$srcdir"/llvm-libs/* "$pkgdir"/usr/lib

  install -Dm644 "$srcdir"/llvm-project/llvm/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/LICENSE.TXT
}

_python_optimize() {
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package_clang-minimal-git() {
  pkgdesc='C language family frontend for LLVM (trimmed down git version)'
  depends=(llvm-libs-minimal-git clang)
  optdepends=('openmp: OpenMP support in clang with -fopenmp'
    'python: for scan-view, scan-build, git-clang-format, clang-rename and python bindings'
    'llvm-minimal-git: referenced by some clang headers')
  conflicts=(compiler-rt clang)
  provides=(compiler-rt clang clang-analyzer clang-tools-extra)

  # clang libraries
  install -d "$pkgdir"/usr/lib
  cp -a $srcdir/clang/lib/{libear,libscanbuild,clang,cmake,libclang*} $pkgdir/usr/lib

  # clang binaries
  install -d "$pkgdir"/usr/bin
  cp -a "$srcdir"/clang/bin/{analyze-build,c-index-test,clang*,diagtool,find-all-symbols,git-clang-format,hmaptool,intercept-build,modularize,pp-trace,run-clang-tidy,scan-build,scan-build-py,scan-view} "$pkgdir"/usr/bin

  # clang includes
  install -d "$pkgdir"/usr/include
  cp -a "$srcdir"/clang/include/{clang,clang-c} "$pkgdir"/usr/include

  # clang share
  install -d "$pkgdir"/usr/share
  cp -a "$srcdir"/clang/share/{clang,man,opt-viewer,scan-build,scan-view} "$pkgdir"/usr/share

  # Move scanbuild-py into site-packages
  local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
  install -d "$pkgdir/$site_packages"
  mv "$pkgdir"/usr/lib/{libear,libscanbuild} "$pkgdir/$site_packages"

  sed -i 's|libexec|lib/clang|' \
    "$pkgdir/usr/bin/scan-build" \
    "$pkgdir/$site_packages/libscanbuild/analyze.py"

  # Compile Python scripts
  _python_optimize "$pkgdir"/usr/share "$pkgdir"/$site_packages

  install -Dm644 "$srcdir"/llvm-project/compiler-rt/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/compiler-rt-LICENSE.TXT
  install -Dm644 "$srcdir"/llvm-project/clang-tools-extra/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/clang-tools-extra-LICENSE.TXT
  install -Dm644 "$srcdir"/llvm-project/clang/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/clang-LICENSE.TXT
}

package_libc++-minimal-git() {
  pkgdesc='C language family frontend for LLVM (trimmed down git version)'
  depends=(libc++abi-minimal-git="$pkgver-$pkgrel")
  conflicts=(libc++)
  provides=(libc++-minimal-git)

  #prepare libcxxabi files
  mkdir -p "$srcdir"/libcxxabi/{lib,include/c++/v1}
  mv -f "$srcdir"/libcxx/include/c++/v1/*cxxabi* "$srcdir"/libcxxabi/include/c++/v1
  mv -f "$srcdir"/libcxx/lib/libc++abi* "$srcdir"/libcxxabi/lib

  # For header include
  # package libc++
  install -d "$pkgdir"/usr/{lib,include}
  # move libc++ libriaries and header modules
  cp -a "$srcdir"/libcxx/lib "$pkgdir"/usr/lib
  # include headers
  cp -a "$srcdir"/libcxx/include/c++ "$pkgdir"/usr/include

  install -Dm0644 "$srcdir"/llvm-project/libcxx/CREDITS.TXT "$pkgdir"/usr/share/licenses/"$pkgname"/CREDITS
  install -Dm0644 "$srcdir"/llvm-project/libcxx/LICENSE.TXT "$pkgdir"/usr/share/licenses/"$pkgname"/LICENSE
}

package_libc++abi-minimal-git() {
  pkgdesc='C language family frontend for LLVM (trimmed down git version)'
  depends=(llvm-libs)
  conflicts=(libc++abi)
  provides=(libc++abi-minimal-git)

  #package libcxxabi
  install -d "$pkgdir"/usr/{lib,include}
  cp -a "$srcdir"/libcxxabi/lib "$pkgdir"/usr/lib
  cp -a "$srcdir"/libcxxabi/include "$pkgdir"/usr/include

  install -Dm0644 "$srcdir"/llvm-project/libcxxabi/CREDITS.TXT "$pkgdir"/usr/share/licenses/"$pkgname"/CREDITS
  install -Dm0644 "$srcdir"/llvm-project/libcxxabi/LICENSE.TXT "$pkgdir"/usr/share/licenses/"$pkgname"/LICENSE
}
